{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to Jupyter & Unix Commands!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome! Is this your first time navigating through a Jupyter notebook? <br> \n",
    "Don't worry! We'll be taking a look at a few important unix commands in order to work through this notebook.\n",
    "\n",
    "Here's an overview:\n",
    "- Jupyter Notebook Overview\n",
    "- Unix Commands Overview\n",
    "- Working with Sequence Files Example\n",
    "\n",
    "-----\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Jupyter Notebook Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So... [what is a notebook?](https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/what_is_jupyter.html) Simply, it's a document that allows you to use both computational code snippets as well as regular text for explanation/analysis.\n",
    "We create cells that contain either code (usually Python or R, you can run unix commands as well), or Markdown language for general writing.\n",
    "After you write your cells, you can select it and click run (or press Ctrl-Enter) and it will run the selected cell.\n",
    "\n",
    "A key note is that your code will run in the directory where the notebook is saved. So if you have code producing output (exporting a textfile or making a directory with a unix command), it will execute where the notebook file is located -- unless you include unix commands to change the working directory.\n",
    "\n",
    "The notebook executes in the order you run the cells. This means you can execute the first line of code and then the last line of code if you wanted. Often this breaks your work, so be mindful of the order you're executing code cells. The order is important to the output. \n",
    "\n",
    "Finally, as I mentioned you can use unix commands. Here we're working with a python 3 kernel (the computational engine to execute code in our notebook), so in order to run those commands we need to enter a \"!\" in front of the command, and for the change directory (cd) command it requires a \"%\". This tells Python that we are running a unix command. \n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unix Commands Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's go over the basic Unix commands that are included in this notebook. If you need a more thorough explanation, you can follow this introduction from [software carpentry](https://swcarpentry.github.io/shell-novice/01-intro.html)\n",
    "\n",
    "### Getting Unstuck\n",
    "Commands have a helpful flag (additional arguments to do extra actions) called \"--help\" that will give you information on what the command does and how to use it, and any other flags that you can attach to the command:\n",
    "\n",
    "    ls --help\n",
    "\n",
    "There's also a more in-depth manual accessed by typing the command \"man\" followed by the command:\n",
    "\n",
    "    man ls\n",
    "\n",
    "### Navigation\n",
    "\n",
    "__pwd__: Print Working Directory. It tells you which directory you're currently working in. \\\n",
    "__ls__: List. List out all directories/files in the current directory. \\\n",
    "__cd__: Change Directory. Moves you to the specified directory. \n",
    "\n",
    "### Working with Files & Directories\n",
    "__mkdir__: Make Directory. This creates a new directory. \\\n",
    "__wget__: A network download tool. This command supports downloads files from a server. \\\n",
    "__unzip__: Unzip. Unzips a compressed file. \\\n",
    "__rm__: Remove. This deletes a file, if it's a directory you'll need the recursive -r flag, but be mindful this is permanent. \\\n",
    "__mv__: Move. Moves the specified file. \\\n",
    "__cat__: Concatenate. This displays the contents of a file. \\\n",
    "__cp__: Copy. Copies the contents of a file/directory. \\\n",
    "__grep__: Search Command. This filters through a file to search for a pattern of specified characters. \\\n",
    "__wc__: Word Count. Calculates a file's word, line, character or byte count. \\\n",
    "__diff__: Difference. Displays the differences in files. \\\n",
    "__cksum__: Checksum. Generates output values of a file (CRC, Byte Size, and Name). \\\n",
    "__sed__: Stream Editor. Can insert, delete, search and replace (substitute) text.\n",
    "\n",
    "### Piping & Filtering\n",
    "Unix commands can chain content from one command into another. For example, we can use the concatenate \"cat\" command, \"pipe\" to to a line count using the word count command (wc -l) and save the into a new file:\n",
    "\n",
    "    cat fileName.txt | wc -l > file_line_count.txt\n",
    "\n",
    "This will be important in the upcoming example on working with sequence files.\n",
    "\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with Sequences Files\n",
    "\n",
    "In this exercise, we will use Unix to work with a sequence file with contigs in it. Contigs are parts of a genomic sequence that are from the same organisms and have been \"assembled together\" from shorter sequence reads that come directly off a sequencer.\n",
    "\n",
    "## Step 1: Go to the assignment directory and get the contig file\n",
    "\n",
    "Remember, our notebooks work in the current working directory -- and when you login to the HPC this automatically is your home directory. You will need to move to the project directory `/xdisk/bhurwitz/your_netid`. The next two cells define what that project directory is (be sure to replace your_netid with your actual netid) and then move into that directory for our exercise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true,
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/xdisk/bhurwitz/bhurwitz\n"
     ]
    }
   ],
   "source": [
    "# Ctrl + Enter will run the selected cell, after running a cell you'll see the terminal's output.\n",
    "# In this case, we're printing the work directory for the assignments and changing into that directory.\n",
    "# note the ipython uses a % in front of the change directory command\n",
    "netid = \"your_netid\"\n",
    "workdir = \"/xdisk/bhurwitz/\" + netid + '/assignments'\n",
    "print(workdir)\n",
    "%cd workdir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "# now we are going to `ls` to list all the assignment directories, and then change into 01_intro_unix directory for this assignment\n",
    "!ls\n",
    "%cd 01_intro_unix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you are in the 01_intro_unix directory (and nothing is currently in this directory). We can test that with the `ls -l` command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!ls -l"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are going to make a directory to store our contigs, and go into that directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!mkdir 01_contigs\n",
    "%cd 01_contigs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Use wget to download the contigs files and unzip the folder\n",
    "\n",
    "Next, we will go and get the contigs files from the iMicrobe FTP site. We can use the `wget` command to pull down the data from the FTP site to our current directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!wget ftp://ftp.imicrobe.us/biosys-analytics/contigs/contigs.zip\n",
    "\n",
    "#random tip: Output from a command can be cleared by clicking Cell -> Current (or All Outputs) -> Clear"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check to see that you have the contigs.zip file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!ls -l"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Unpack the zipped file\n",
    "\n",
    "Great news! You downloaded the file. It should have a file size of \"1979343\", Now back to the exercise. Let's unpack the contigs.zip file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "#Unzip the Fasta Files\n",
    "!unzip contigs.zip\n",
    "#Delete the Zip download\n",
    "!rm contigs.zip\n",
    "# check out the files you just downloaded and unpacked\n",
    "!ls -l"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fasta formmated files\n",
    "\n",
    "These files are in [FASTA format](https://en.wikipedia.org/wiki/FASTA_format), which basically looks like this:\n",
    "\n",
    "```\n",
    ">Contig_4027\n",
    "AACCGGGCCAATCACCACGCGATGGACGGTACGCTCGATTTCAATGGCAACCTGTATTTCTCGGACGATCTGAACACCAACCCCTATCGGAGCATCGGGAAGATCGATGGACGGACCGGGGAGATCACCAACGTCCAGGTCGTTGATTTCTCCGAAGACAACATCGAATCCACCGTCGATGTAATGGGATTGGGTTGGATGGAAGTGGGAGTGTCTCTTTCCACTCACCTGGGGGATTTTGCTTGCGGTGTGAC\n",
    ">Contig_33139\n",
    "TGTGACGGACCGTGATCGTTCCCTGATCCAGGTCGACGTCACTCCACTGGAGAGCCAGCAGCTCGCCCAGGCGTAGTCCGCAGAAGATGGCAGTGAAGAATAGAGCCGCTTGTGGGTGCGAGTTGCCGGAGCTGTTCCAGTCCCTGAGACCATCGACCAACGTCCGCGCCTCGGTGGAGCTATAGGGATTGATTTGTTTTTTCTGAGACGACTGCGGTCCGAGGATCTTGCGAAGATCGATCCCGATCGCTGGG\n",
    "```\n",
    "\n",
    "Header lines start with \">\", then the sequence follows. Sequences may be broken up over several lines of 50 or 80 characters, but it's just as common to see the sequences take only one (sometimes very long) line. Sequences may be nucleotides, proteins, very short DNA/RNA, longer contigs (shorter strands assembled into contiguous regions), or entire chromosomes or even genomes.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Grep files\n",
    "\n",
    "So, how many sequences are in \"group12_contigs.fasta\" file? To answer, we just need to count how many times we see \">\". We can do that with the `grep` command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!grep > group12_contigs.fasta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**What just happened??** You got a usage statement for grep, and it didn't execute the command. What happened to the file?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!ls -l\n",
    "# Notice in the output for the first row, 4th column, the file size is now \"0\" "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Oh no! I overwrote my file\n",
    "\n",
    "You should actually see nothing (a zero length file) because something quite insidious happened with that first \"grep\" statement -- it overwrote our original \"group12_contigs.fasta\" with the result of \"grep\"ing for nothing, which is nothing. Let's check that, you should see the file has a \"0\" length, or nothing in it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gotcha!\n",
    "\n",
    "What is going on? Remember that the \">\" symbol tell Unixs to redirect the output of grep into a file. But, we need to tell Unix that we mean a literal greater-than sign by placing it in single or double quotes or putting a backslash in front of it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "# This is known as escaping characters -- a common occurance in programming.\n",
    "!grep '>' group12_contigs.fasta\n",
    "!grep \\> group12_contigs.fasta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, we ran those commands correctly, but nothing was output. This is because the file doesn't have anything in it! (given that we erased it in the last step) Let's try those commands on one of the other contigs files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!grep '>' group24_contigs.fasta\n",
    "#This prints out a long list of every occurance of \">\" contained in the file.\n",
    "#There's another method to produce just a number of the occurance that we'll use shortly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's get the file back, and try again.\n",
    "\n",
    "Ugh, OK, I have to go back and wget the \"contigs.zip\" file to restore it. That's OK. Things like this happen all the time. First we will delete the old files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "#Deletes all files in the current directory with the .fasta file type\n",
    "!rm *.fasta\n",
    "#Downloads, unzips and deletes the zip file again\n",
    "!wget ftp://ftp.imicrobe.us/biosys-analytics/contigs/contigs.zip\n",
    "!unzip contigs.zip\n",
    "!rm contigs.zip\n",
    "!ls -l"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The file is back!\n",
    "\n",
    "You should see something like this from the last command\n",
    "\n",
    "```\n",
    "-rw-rw----  1 bhurwitz  staff  3034371 Aug 10  2016 group12_contigs.fasta\n",
    "-rw-rw----  1 bhurwitz  staff  1550608 Aug 10  2016 group20_contigs.fasta\n",
    "-rw-rw----  1 bhurwitz  staff  1686023 Aug 10  2016 group24_contigs.fasta\n",
    "```\n",
    "\n",
    "### Count the sequences in the contigs file\n",
    "\n",
    "Now that I have restored my data, I want to count how many greater-than signs (or fasta headers) are in the file. These are the names of the sequences in the contigs file. You should get 132.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!grep '>' group12_contigs.fasta | wc -l\n",
    "#Notice the pipe symbol \"|\", instead of printing out all occurances of \">\" we're just using the wc (word count) command with\n",
    "#the -l flag to produce a single number of instances."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting aliases for something you do often\n",
    "\n",
    "JUST FYI.\n",
    "\n",
    "I could see doing that often. Maybe we should make this into an \"alias\". The problem is that the \"argument\" to the function (the filename) is stuck in the middle of the chain of commands, so it would make it tricky to use an alias for this. We can create a bash function that we add to our $HOME/.bashrc (or $HOME/.zshrc if you are in that shell -- on Mac).\n",
    "\n",
    "You can add this function using nano (a text editor):\n",
    "\n",
    "   #### Step 1: Open nano with the file name using the command:\n",
    "        nano countseqs.sh\n",
    "   #### Step 2: Copy the function into the nano text editor and save it:\n",
    "        function countseqs() {\n",
    "          grep '>' $1 | wc -l\n",
    "        }\n",
    "       \n",
    "-----\n",
    "        \n",
    "        Ctrl + X to Exit, Y to Save, Enter to Confirm file name\n",
    "        \n",
    "-----\n",
    "\n",
    "#### Step 3: Add the function to the end of your .bashrc file with the command:\n",
    "        cat countseqs.sh >> ~/.bashrc\n",
    "\n",
    "\n",
    "\n",
    "\n",
    " \n",
    "#### Step 4: Next you would source the file to make the changes live in the current unix window.\n",
    "\n",
    "\n",
    "        source ~/.bashrc\n",
    "\n",
    "#### Step 5: You can now run it from the command line:\n",
    "\n",
    "        countseqs group12_contigs.fasta\n",
    "\n",
    "-----\n",
    "\n",
    " There is a powerful tool called [\"seqmagick\"](https://github.com/fhcrc/seqmagick) that will do this (and much, much more). We will try that program out later...\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Searching for something...\n",
    "\n",
    "Moving on, let's find how many contig IDs in \"group12_contigs.fasta\" contain the number \"47\":"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!grep 47 group12_contigs.fasta > group12_ids_with_47\n",
    "#Grepping all ID's with number 47 and saving it into a new file\n",
    "!cat group12_ids_with_47\n",
    "#Outputting all the information in the new file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should see something like this:\n",
    "\n",
    "```\n",
    "cat group12_ids_with_47\n",
    ">Contig_247\n",
    ">Contig_447\n",
    ">Contig_476\n",
    ">Contig_1947\n",
    ">Contig_4764\n",
    ">Contig_4767\n",
    ">Contig_13471\n",
    "```\n",
    "\n",
    "Let's play around with the file, by putting it in some temp files. Here are two ways to make a copy of the file contents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!cat group12_ids_with_47 > temp1_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we make a copy the file again to make duplicate files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!cp group12_ids_with_47 temp2_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: Checking if files are the same\n",
    "\n",
    "How can we be sure these files are the same? Let's use \"diff\":\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!diff temp1_ids temp2_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should see nothing, which is a case of \"no news is good news.\" They don't differ in any way. We can verify this with \"cksum\" below (see below). You should see this:\n",
    "\n",
    "```\n",
    "2188208005 89 temp1_ids\n",
    "2188208005 89 temp2_ids\n",
    "```\n",
    "\n",
    "They are the same file size. If there were even one character difference, they would generate different hashes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!cksum temp*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Step 6: Checking for duplicates\n",
    "\n",
    "First, we will create a file with duplicate IDs:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!cat temp1_ids temp2_ids > duplicate_ids\n",
    "#This concatenates both temp files content into a new file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we will check contents of \"duplicate_ids\" using \"less\" or \"cat.\" Now grab all of the contigs IDs from \"group20_contigs.fasta\" that contain the number \"51.\" Concatenate the new IDs to the duplicate_ids file in a file called \"multiple_ids\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!cp duplicate_ids multiple_ids\n",
    "!grep 51 group20_contigs.fasta >> !$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that in the command above\n",
    "\n",
    "```\n",
    "grep 51 group20_contigs.fasta >> !$\n",
    "```\n",
    "\n",
    "is the same as\n",
    "\n",
    "```\n",
    "grep 51 group20_contigs.fasta >> multiple_ids\n",
    "```\n",
    "\n",
    "Cool shortcut huh?\n",
    "\n",
    "Also notice the \">>\" arrows to indicate that we are appending to the existing \"multiple_ids\" file.\n",
    "\n",
    "Now we will remove the existing \"temp\" files using a \"*\" wildcard:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!rm temp*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using sort and uniq\n",
    "\n",
    "Now let's explore more of what \"sort\" and \"uniq\" can do for us. We want to find which IDs are unique and which are duplicated. If we read the manpage (\"man uniq\"), we see that there are \"-d\" and \"-u\" flags for doing just that. The \"-d\" flag will only print duplicate lines, one for each group. And the \"-u\" will only print unique lines. Don't forget that input to \"uniq\" needs to be sorted for this all to work because the duplicates need to be next to each other in the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!sort multiple_ids | uniq -d > temp1_ids #sort multiple_ids, pipe into a uniq -d (repeated flag), place into temp1 file\n",
    "!sort multiple_ids | uniq -u > temp2_ids #sort multiple_ids, pipe into a uniq -u (unique flag), place into temp2 file\n",
    "!diff temp* #check the differences between the two files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should see something like this:\n",
    "\n",
    "```\n",
    "1,7c1,11\n",
    "< >Contig_13471\n",
    "< >Contig_1947\n",
    "< >Contig_247\n",
    "< >Contig_447\n",
    "< >Contig_476\n",
    "< >Contig_4764\n",
    "< >Contig_4767\n",
    "---\n",
    "> >Contig_10051\n",
    "> >Contig_1651\n",
    "> >Contig_4851\n",
    "> >Contig_5141\n",
    "> >Contig_5143\n",
    "> >Contig_5164\n",
    "> >Contig_5170\n",
    "> >Contig_5188\n",
    "> >Contig_6351\n",
    "> >Contig_9651\n",
    "> >Contig_9851\n",
    "```\n",
    "\n",
    "Let's remove our temp files again and make a \"clean_ids\" file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!rm temp*\n",
    "!sort multiple_ids | uniq > clean_ids\n",
    "!wc -l multiple_ids clean_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should see something like this:\n",
    "\n",
    " 14 multiple_ids\n",
    " 7 clean_ids\n",
    " 21 total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 7: Using the sed command to alter the ids\n",
    "\n",
    "We can use \"sed\" to alter the IDs. The \"s//\" command says to \"substitute\" the first thing with the second thing, e.g., to replace the first occurence of \"foo\" with \"bar\", use [\"s/foo/bar/\"](http://stackoverflow.com/questions/4868904/what-is-the-origin-of-foo-and-bar). If you want to replace all instances, of \"foo\" with \"bar\", use [\"s/foo/bar/g\"] to say you want to run the command \"globally."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [],
   "source": [
    "!sed 's/C/c/' clean_ids\n",
    "!sed 's/_/./' clean_ids\n",
    "!sed 's/>//' clean_ids > newclean_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we run these sed commands, what do our ids look like? Can you write a few Unix commands below to see what is in the newclean_ids file?\n",
    "\n",
    "What did you change with the first two commands? Did it \"stick\", aka was saved in the clean_ids file?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!cat clean_ids \n",
    "!cat newclean_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we see with the cat command above, only the last sed command stuck and saved into the newclean_ids file. We have a few options to get all of them to work. We could pipe it all together, or we can use this handy -e flag and just space our substitutions with \"/\" in between the quotes. Usually, a single command is specified as the first argument to sed.  BUt, you can add multiple commands by using the -e (piping from cat) or -f (in a file) options.  All commands are applied to the input in the order they are specified regardless of their origin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!sed -e 's/C/c/;s/_/./;s/>//' clean_ids > final_clean_ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!cat final_clean_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we see all of our wanted substitutions have been placed into this final_clean_ids file for futher use."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "1a1af0ee75eeea9e2e1ee996c87e7a2b11a0bebd85af04bb136d915cefc0abce"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
